@{
    var postView = ViewBag.PostView as BlogProject.ViewModel.PostViewModel;
    var post = postView.Post;
    var comments = ViewBag.Comments as List<BlogProject.Models.Comment>;
}

<div class="card" data-postid="@post.Id">

    <div class="card-header d-flex justify-content-between">
        <span>@Html.DisplayFor(modelItem => post.User.UserName)</span>
        <span>@post.CreatedAt.ToString("MM/dd/yyyy")</span>

        @if (post.UserId == ViewBag.CurrentUserId)
        {
            <div class="dropdown">
                <button class="btn btn-transparent p-0 border-0 bg-transparent" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-gear"></i>
                </button>
                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <li><a class="dropdown-item editPostBtn" href="#">Edit</a></li>
                    <li><a class="dropdown-item" href="@Url.Action("Delete", new { id = post.Id })">Delete</a></li>
                </ul>
            </div>
        }
    </div>
    <div class="card-body">
        <h5 class="card-title postTitle">@post.Titre</h5>
        <p class="card-text postBody">@post.Body</p>
    </div>
    <div class="card-footer d-flex justify-content-between">
        <div class="btn-group w-50">
            <button id="up-arrow-@post.Id" class="btn btn-light @(postView.CurrentUserVote == 1 ? "selected" : "")" onclick="increaseScore(@post.Id)">
                <i class="fas fa-arrow-up"></i>
            </button>
            <span id="score-@post.Id" class="btn btn-light disabled">
                @Html.DisplayFor(modelItem => post.Score)
            </span>
            <button id="down-arrow-@post.Id" class="btn btn-light @(postView.CurrentUserVote == -1 ? "selected" : "")" onclick="decreaseScore(@post.Id)">
                <i class="fas fa-arrow-down"></i>
            </button>
        </div>
        <a class="btn btn-secondary w-50" asp-action="PostDetails" asp-route-id="@post.Id">
            Comments
        </a>
    </div>
    <!-- Comments Section -->
    <div class="card-footer">
        @foreach (var comment in comments)
        {
            <div class="comment mb-2 d-flex justify-content-between align-items-center" data-comment-id="@comment.Id">
                <!-- Added the data-comment-id attribute here -->
                <div>
                    <div class="d-flex justify-content-between w-100">
                        <span>@Html.DisplayFor(modelItem => comment.User.UserName)</span>
                        <span class="comment-date text-muted">
                            @comment.CreatedAt.ToString("MM/dd/yyyy")
                        </span>
                    </div>
                    <div class="comment-text">
                        <!-- Added a class here for jQuery selector -->
                    @comment.Body
                    </div>
                    @{
                        bool isAuthor = comment.UserId == ViewBag.CurrentUserId;  // Assuming the Comment model has a UserId property
                    }

                    @if (isAuthor)
                    {
                        <button class="btn btn-sm btn-edit">Edit</button>

                        <div class="edit-section" style="display: none;">
                            <textarea class="form-control edit-textarea">@comment.Body</textarea>
                            <button class="btn btn-sm btn-save">Save</button>
                            <button class="btn btn-sm btn-cancel">Cancel</button>
                        </div>
                    }
                </div>


                <!-- Score and Arrows -->
                <div class="btn-group">
                    <button id="comment-up-arrow-@comment.Id" class="btn btn-light" onclick="increaseScoreComm(@comment.Id)">
                        <i class="fas fa-arrow-up"></i>
                    </button>
                    <span id="comment-score-@comment.Id" class="btn btn-light disabled">
                        @Html.DisplayFor(modelItem => comment.Score)
                    </span>
                    <button id="comment-down-arrow-@comment.Id" class="btn btn-light" onclick="decreaseScoreComm(@comment.Id)">
                        <i class="fas fa-arrow-down"></i>
                    </button>
                </div>
            </div>
        }
    </div>

    <!-- Comment Input Box -->
    <div class="card-footer">
        <form asp-controller="Comment" asp-action="Create" asp-route-postId="@post.Id" method="post">
            <div class="input-group">
                <input type="text" name="comment" class="form-control" placeholder="Leave a comment...">
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="submit">Comment</button>
                </div>
            </div>
        </form>
    </div>

</div>


<script>
    function updateScore(postId, change) {
        $.ajax({
            url: '/Post/UpdateScore',
            type: 'POST',
            data: {
                'postId': postId,
                'change': change
            },
            success: function (response) {
                $('#score-' + postId).text(response.newScore);
                adjustArrowState(postId, response.newVote, change);
            }
        });
    }

    function adjustArrowState(postId, newVote, change) {
        $('#up-arrow-' + postId).removeClass('selected');
        $('#down-arrow-' + postId).removeClass('selected');

        if (newVote == 1) {
            $('#up-arrow-' + postId).addClass('selected');
        } else if (newVote == -1) {
            $('#down-arrow-' + postId).addClass('selected');
        }
    }

    function increaseScore(postId) {
        updateScore(postId, 1);
    }

    function decreaseScore(postId) {
        updateScore(postId, -1);
    }


    function updateCommentScore(commentId, change) {
        $.ajax({
            url: '/Comment/UpdateScore',
            type: 'POST',
            data: {
                'commentId': commentId,
                'change': change
            },
            success: function (response) {
                $('#comment-score-' + commentId).text(response.newScore);
                adjustCommentArrowState(commentId, response.newVote, change);
            }
        })
    }

    function adjustCommentArrowState(commentId, newVote, change) {
        $('#comment-up-arrow-' + commentId).removeClass('selected');
        $('#comment-down-arrow-' + commentId).removeClass('selected');

        if (newVote == 1) {
            $('#comment-up-arrow-' + commentId).addClass('selected');
        } else if (newVote == -1) {
            $('#comment-down-arrow-' + commentId).addClass('selected');
        }
    }

    function increaseScoreComm(commentId) {
        updateCommentScore(commentId, 1);
    }

    function decreaseScoreComm(commentId) {
        updateCommentScore(commentId, -1);
    }



    $(document).ready(function () {
        $('.btn-edit').on('click', function () {
            let container = $(this).closest('.comment');
            container.find('.comment-text, .btn-edit').hide();
            container.find('.edit-section').show();
        });

        $('.btn-save').on('click', function () {
            let container = $(this).closest('.comment');
            let commentId = container.data('comment-id');
            let newText = container.find('.edit-textarea').val();

            $.ajax({
                type: "POST",
                url: "/Comment/Edit",
                data: {
                    CommentId: commentId,
                    newText: newText,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function () {
                    container.find('.comment-text').text(newText).show();
                    container.find('.btn-edit').show();
                    container.find('.edit-section').hide();
                },
                error: function () {
                    alert("Error updating the comment.");
                }
            });
        });

        $('.btn-cancel').on('click', function () {
            let container = $(this).closest('.comment');
            container.find('.comment-text, .btn-edit').show();
            container.find('.edit-section').hide();
        });
    });

    $(document).on('click', '.editPostBtn', function (e) {
        e.preventDefault();
        const card = $(this).closest('.card');
        const postId = card.data('postid');
        const postTitle = card.find('.postTitle').text();
        const postBody = card.find('.postBody').text();

        const titleInput = $('<input/>')
            .attr('type', 'text')
            .attr('name', 'Titre')
            .addClass('form-control')
            .val(postTitle);
        card.find(".postTitle").replaceWith(titleInput)

        const bodyTextarea = $('<textarea></textarea>')
            .attr('name', 'Body')
            .addClass('form-control')
            .val(postBody);
        card.find('.postBody').replaceWith(bodyTextarea);

        const saveBtn = $('<button></button>')
            .addClass('btn btn-primary savePostBtn')
            .text('Save');
        card.find('.card-body').append(saveBtn);
    });

    $(document).on('click', '.savePostBtn', function () {
        const card = $(this).closest('.card');
        const postId = card.data('postid');
        console.log(postId);
        const postTitle = card.find('input[name="Titre"]').val();
        console.log(postTitle);
        const postBody = card.find('textarea[name="Body"]').val();
        console.log(postBody);

        $.ajax({
            url: '/Post/Edit',
            type: 'POST',
            data: {
                id: postId,
                Titre: postTitle,
                Body: postBody,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            },
            success: function (response) {
                if (response.success) {
                    const titleElement = $('<h5></h5>').addClass('card-title postTitle').text(postTitle);
                    card.find('input[name="Titre"]').replaceWith(titleElement);

                    const bodyElement = $('<p></p>').addClass('card-text postBody').text(postBody);
                    card.find('textarea[name="Body"]').replaceWith(bodyElement);

                    card.find('.savePostBtn').remove();

                    const greenBand = $('<div></div>')
                        .addClass('edit-successful')
                        .text(response.message);
                    card.prepend(greenBand);
                } else {
                    alert(response.message);
                }
            },
            error: function (xhr, status, error) {
                console.error("Error occurred:", error);
            }
        });
    });

    $(document).on('click', 'a[href^="@Url.Action("Delete")"]', function (e) {
        e.preventDefault();

        const confirmed = confirm("Are you sure you want to delete this post?");
        if (!confirmed) {
            return;
        }

        const postId = $(this).closest('.card').data('postid');

        $.ajax({
            url: '@Url.Action("Delete")',
            type: 'POST',
            data: {
                id: postId,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            },
            success: function (response) {
                if (response.success) {
                    const card = $('div[data-postid="' + postId + '"]');
                    card.replaceWith('<div class="edit-successful">' + response.message + '</div>');
                } else {
                    alert(response.message);
                }
            },
            error: function (xhr, status, error) {
                console.error("Error occurred:", error);
            }
        });
    });

</script>

<style>
    .selected {
        background-color: #007BFF;
        color: white;
    }
</style>