@model IEnumerable<BlogProject.ViewModel.PostViewModel>
@{
    ViewData["Title"] = "Index";
}

<h1>All Posts</h1>

@if (User.Identity.IsAuthenticated)
{
    @await Component.InvokeAsync("PostForm")
}
else
{
    <p>Do you wanna share something? <a href="Identity/Account/Login">Log in</a> to post!</p>
}

@foreach (var item in Model)
{
    var post = item.Post;

    <div class="card mb-4" data-postid="@post.Id">
        <div class="card-header d-flex justify-content-between">
            <span>@Html.DisplayFor(modelItem => post.User.UserName)</span>
            <span>@post.CreatedAt.ToString("MM/dd/yyyy")</span>

            @if (post.UserId == ViewBag.CurrentUserId)
            {
                <div class="dropdown">
                    <button class="btn btn-transparent p-0 border-0 bg-transparent" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-gear"></i>
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <li><a class="dropdown-item editPostBtn" href="#">Edit</a></li>
                        <li><a class="dropdown-item" href="@Url.Action("Delete", new { id = post.Id })">Delete</a></li>
                    </ul>
                </div>
            }
        </div>
        <div class="card-body">
            <h5 class="card-title postTitle">@Html.DisplayFor(modelItem => post.Titre)</h5>
            <p class="card-text postBody">@Html.DisplayFor(modelItem => post.Body)</p>
        </div>
        <div class="card-footer d-flex justify-content-between">
            <div class="btn-group w-50">
                <button id="up-arrow-@post.Id" class="btn btn-light @(item.CurrentUserVote == 1 ? "selected" : "")" onclick="increaseScore(@post.Id)">
                    <i class="fas fa-arrow-up"></i>
                </button>
                <span id="score-@post.Id" class="btn btn-light disabled">
                    @Html.DisplayFor(modelItem => post.Score)
                </span>
                <button id="down-arrow-@post.Id" class="btn btn-light @(item.CurrentUserVote == -1 ? "selected" : "")" onclick="decreaseScore(@post.Id)">
                    <i class="fas fa-arrow-down"></i>
                </button>
            </div>
            <a class="btn btn-secondary w-50" asp-action="PostDetails" asp-route-id="@post.Id">
                Comments
            </a>
        </div>
        <div class="card-footer">
            <form asp-controller="Comment" asp-action="Create" asp-route-postId="@post.Id" method="post">
                <div class="input-group">
                    <input type="text" name="comment" class="form-control" placeholder="Leave a comment...">
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="submit">Comment</button>
                    </div>
                </div>
            </form>
        </div>
        <div>

            @if (post.Comments != null && post.Comments.Count > 0)
            {
                <h5>Top Comment:</h5>
                var topComment = post.Comments.OrderByDescending(c => c.Score).FirstOrDefault(); // Assuming you have a Score property on Comment
                <div class="mb-2">
                    <strong>@Html.DisplayFor(modelItem => topComment.User.UserName)</strong>: @Html.DisplayFor(modelItem => topComment.Body)
                </div>
            }
            else
            {
                <div>No comments yet.</div>
            }
        </div>
    </div>
}

<script>
    function updateScore(postId, change) {
        $.ajax({
            url: '/Post/UpdateScore',
            type: 'POST',
            data: {
                'postId': postId,
                'change': change
            },
            success: function (response) {
                $('#score-' + postId).text(response.newScore);
                adjustArrowState(postId, response.newVote, change);
            },
            error: function (xhr) {
                if (xhr.status === 401) { //not logged in
                    window.location.href = 'Identity/Account/Login';
                }
            }
        });
    }

    function adjustArrowState(postId, newVote, change) {
        $('#up-arrow-' + postId).removeClass('selected');
        $('#down-arrow-' + postId).removeClass('selected');

        if (newVote == 1) {
            $('#up-arrow-' + postId).addClass('selected');
        } else if (newVote == -1) {
            $('#down-arrow-' + postId).addClass('selected');
        }
    }


    function increaseScore(postId) {
        updateScore(postId, 1);
    }

    function decreaseScore(postId) {
        updateScore(postId, -1);
    }

    $(document).on('click', '.editPostBtn', function (e) {
        e.preventDefault();
        const card = $(this).closest('.card');
        const postId = card.data('postid');
        const postTitle = card.find('.postTitle').text();
        const postBody = card.find('.postBody').text();

        const titleInput = $('<input/>')
            .attr('type', 'text')
            .attr('name', 'Titre')
            .addClass('form-control')
            .val(postTitle);
        card.find(".postTitle").replaceWith(titleInput)

        const bodyTextarea = $('<textarea></textarea>')
            .attr('name', 'Body')
            .addClass('form-control')
            .val(postBody);
        card.find('.postBody').replaceWith(bodyTextarea);

        const saveBtn = $('<button></button>')
            .addClass('btn btn-primary savePostBtn')
            .text('Save');
        card.find('.card-body').append(saveBtn);
    });

    $(document).on('click', '.savePostBtn', function () {
        const card = $(this).closest('.card');
        const postId = card.data('postid');
        const postTitle = card.find('input[name="Titre"]').val();
        const postBody = card.find('textarea[name="Body"]').val();

        $.ajax({
            url: '@Url.Action("Edit")',
            type: 'POST',
            data: {
                id: postId,
                Titre: postTitle,
                Body: postBody,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            },
            success: function (response) {
                if (response.success) {
                    // Convert the input back to a title
                    const titleElement = $('<h5></h5>').addClass('card-title postTitle').text(postTitle);
                    card.find('input[name="Titre"]').replaceWith(titleElement);

                    // Convert the textarea back to a body
                    const bodyElement = $('<p></p>').addClass('card-text postBody').text(postBody);
                    card.find('textarea[name="Body"]').replaceWith(bodyElement);

                    // Remove the save button
                    card.find('.savePostBtn').remove();

                    // Display the green band
                    const greenBand = $('<div></div>')
                        .addClass('edit-successful')
                        .text(response.message);
                    card.prepend(greenBand);
                } else {
                    // Handle error
                    alert(response.message);
                }
            },
            error: function (xhr, status, error) {
                console.error("Error occurred:", error);
            }
        });
    });

    $(document).on('click', 'a[href^="@Url.Action("Delete")"]', function (e) {
        e.preventDefault();

        const confirmed = confirm("Are you sure you want to delete this post?");
        if (!confirmed) {
            return;
        }

        const postId = $(this).closest('.card').data('postid');

        $.ajax({
            url: '@Url.Action("Delete")',
            type: 'POST',
            data: {
                id: postId,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            },
            success: function (response) {
                if (response.success) {
                    const card = $('div[data-postid="' + postId + '"]');
                    card.replaceWith('<div class="edit-successful">' + response.message + '</div>');
                } else {
                    alert(response.message);
                }
            },
            error: function (xhr, status, error) {
                console.error("Error occurred:", error);
            }
        });
    });



</script>

<style>
    .selected {
        background-color: #007BFF;
        color: white;
    }

    .delete-successful {
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
    }

</style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.1/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js"></script>
